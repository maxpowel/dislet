// Code generated by protoc-gen-go. DO NOT EDIT.
// source: machinery.proto

package protomodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskState int32

const (
	TaskState_UNKWNOWN TaskState = 0
	TaskState_PENDING  TaskState = 1
	TaskState_RECEIVED TaskState = 2
	TaskState_STARTED  TaskState = 3
	TaskState_RETRY    TaskState = 4
	TaskState_SUCCESS  TaskState = 5
	TaskState_FAILURE  TaskState = 6
)

var TaskState_name = map[int32]string{
	0: "UNKWNOWN",
	1: "PENDING",
	2: "RECEIVED",
	3: "STARTED",
	4: "RETRY",
	5: "SUCCESS",
	6: "FAILURE",
}
var TaskState_value = map[string]int32{
	"UNKWNOWN": 0,
	"PENDING":  1,
	"RECEIVED": 2,
	"STARTED":  3,
	"RETRY":    4,
	"SUCCESS":  5,
	"FAILURE":  6,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}
func (TaskState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type TaskError struct {
	Code   int32             `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Format string            `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	Params map[string]string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskError) Reset()                    { *m = TaskError{} }
func (m *TaskError) String() string            { return proto.CompactTextString(m) }
func (*TaskError) ProtoMessage()               {}
func (*TaskError) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TaskError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TaskError) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TaskError) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type TaskStateResponse struct {
	State TaskState  `protobuf:"varint,1,opt,name=State,enum=protomodel.TaskState" json:"State,omitempty"`
	ETA   int32      `protobuf:"varint,2,opt,name=ETA" json:"ETA,omitempty"`
	Uid   string     `protobuf:"bytes,3,opt,name=Uid" json:"Uid,omitempty"`
	Error *TaskError `protobuf:"bytes,4,opt,name=Error" json:"Error,omitempty"`
}

func (m *TaskStateResponse) Reset()                    { *m = TaskStateResponse{} }
func (m *TaskStateResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskStateResponse) ProtoMessage()               {}
func (*TaskStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TaskStateResponse) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_UNKWNOWN
}

func (m *TaskStateResponse) GetETA() int32 {
	if m != nil {
		return m.ETA
	}
	return 0
}

func (m *TaskStateResponse) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *TaskStateResponse) GetError() *TaskError {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskError)(nil), "protomodel.TaskError")
	proto.RegisterType((*TaskStateResponse)(nil), "protomodel.TaskStateResponse")
	proto.RegisterEnum("protomodel.TaskState", TaskState_name, TaskState_value)
}

func init() { proto.RegisterFile("machinery.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xcd, 0xba, 0x56, 0x7b, 0x2b, 0x1a, 0x83, 0x4a, 0xf1, 0xa9, 0xee, 0xa9, 0x28, 0xf4,
	0x61, 0xbe, 0x38, 0xdf, 0xc6, 0x16, 0x65, 0x28, 0x75, 0xa4, 0xad, 0xc3, 0xc7, 0xb8, 0x66, 0x38,
	0xb6, 0x2e, 0x23, 0xad, 0xc2, 0x7e, 0x86, 0x3f, 0xc4, 0xff, 0x28, 0x49, 0x86, 0x8a, 0x3e, 0xf5,
	0xde, 0x73, 0x4f, 0xbf, 0x73, 0x08, 0x1c, 0x56, 0x7c, 0xfa, 0x3a, 0x5f, 0x09, 0xb5, 0x49, 0xd6,
	0x4a, 0x36, 0x92, 0x80, 0xf9, 0x54, 0xb2, 0x14, 0xcb, 0xce, 0x27, 0x02, 0x3f, 0xe7, 0xf5, 0x82,
	0x2a, 0x25, 0x15, 0x21, 0xd0, 0x9e, 0xca, 0x52, 0x84, 0x28, 0x42, 0xb1, 0xcb, 0xcc, 0x4c, 0x4e,
	0xc1, 0x9b, 0x49, 0x55, 0xf1, 0x26, 0x6c, 0x45, 0x28, 0xf6, 0xd9, 0x76, 0x23, 0x3d, 0xf0, 0xd6,
	0x5c, 0xf1, 0xaa, 0x0e, 0x9d, 0xc8, 0x89, 0x83, 0xee, 0x79, 0xf2, 0x83, 0x4d, 0xbe, 0x91, 0xc9,
	0xd8, 0x78, 0xe8, 0xaa, 0x51, 0x1b, 0xb6, 0xfd, 0xe1, 0xac, 0x07, 0xc1, 0x2f, 0x99, 0x60, 0x70,
	0x16, 0x62, 0x63, 0x42, 0x7d, 0xa6, 0x47, 0x72, 0x0c, 0xee, 0x3b, 0x5f, 0xbe, 0x89, 0x6d, 0xa4,
	0x5d, 0x6e, 0x5a, 0xd7, 0xa8, 0xf3, 0x81, 0xe0, 0x48, 0xc3, 0xb3, 0x86, 0x37, 0x82, 0x89, 0x7a,
	0x2d, 0x57, 0xb5, 0x20, 0x97, 0xe0, 0x1a, 0xc1, 0x30, 0x0e, 0xba, 0x27, 0x7f, 0xab, 0x58, 0xb7,
	0xf5, 0xe8, 0x38, 0x9a, 0xf7, 0x0d, 0xda, 0x65, 0x7a, 0xd4, 0x4a, 0x31, 0x2f, 0x43, 0xc7, 0x16,
	0x28, 0xe6, 0xa5, 0x06, 0x9a, 0xfa, 0x61, 0x3b, 0x42, 0x71, 0xf0, 0x1f, 0x68, 0x8e, 0xcc, 0x7a,
	0x2e, 0x66, 0xf6, 0x09, 0x2d, 0x7d, 0x1f, 0xf6, 0x8a, 0xf4, 0x7e, 0x92, 0x3e, 0x4e, 0x52, 0xbc,
	0x43, 0x02, 0xd8, 0x1d, 0xd3, 0x74, 0x38, 0x4a, 0xef, 0x30, 0xd2, 0x27, 0x46, 0x07, 0x74, 0xf4,
	0x44, 0x87, 0xb8, 0xa5, 0x4f, 0x59, 0xde, 0x67, 0x39, 0x1d, 0x62, 0x87, 0xf8, 0xe0, 0x32, 0x9a,
	0xb3, 0x67, 0xdc, 0x36, 0x7a, 0x31, 0x18, 0xd0, 0x2c, 0xc3, 0xae, 0x5e, 0x6e, 0xfb, 0xa3, 0x87,
	0x82, 0x51, 0xec, 0xbd, 0x78, 0xa6, 0xc4, 0xd5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x11,
	0x3a, 0x2d, 0xd1, 0x01, 0x00, 0x00,
}
